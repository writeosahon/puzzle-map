{"version":3,"sources":["controller.js"],"names":[],"mappings":"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","file":"controller-compiled.js","sourcesContent":["/**\r\n * Created by UTOPIA SOFTWARE on 26/7/2018.\r\n */\r\n\r\n/**\r\n * file defines all View-Models, Controllers and Event Listeners used by the app\r\n *\r\n * The 'utopiasoftware_app_namespace' namespace variable has being defined in the base js file.\r\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\r\n * also used interchangeably\r\n */\r\n\r\n// define the controller namespace\r\nutopiasoftware[utopiasoftware_app_namespace].controller = {\r\n\r\n    /**\r\n     * create the LifeCycle object for managing different app states\r\n     */\r\n    appLifeCycleObservable: new Lifecycle({},\r\n                                    [\"puzzle-menu:opened\", \"puzzle-menu:closed\", \"puzzle-menu:exit-clicked\",\r\n                                     \"puzzle-menu:background-music-clicked\", \"puzzle-menu:sound-effects-clicked\",\r\n                                     \"puzzle-menu:puzzle-hints-clicked\",\r\n\r\n                                     \"app:will-exit\", \"app:no-exit\", \"app:exited\"], {\r\n                                    autoStart: false, autoEmit: false, autoEnd: false}).start(),\r\n\r\n    /**\r\n     * method contains the stratup/bootstrap code needed to initiate app logic execution\r\n     */\r\n    startup: function(){\r\n\r\n        // initialise the app libraries and plugins\r\n        ons.ready(async function () {\r\n            // set the default handler for the app\r\n            ons.setDefaultDeviceBackButtonListener(function(){\r\n                // does nothing for now!!\r\n            });\r\n\r\n            // create the view-reports-additional menu popover\r\n            // await ons.createPopover(\"view-reports-additional-menu-popover-template\");\r\n\r\n            // displaying prepping message\r\n            $('#loader-modal-message').html(\"Loading Puzzle...\");\r\n            $('#loader-modal').get(0).show(); // show loader\r\n\r\n            if(true){ // there is a previous logged in user\r\n                // load the app main page\r\n                $('ons-splitter').get(0).content.load(\"app-main-template\");\r\n            }\r\n            else{ // there is no previously logged in user\r\n                // load the login page\r\n                $('ons-splitter').get(0).content.load(\"login-template\");\r\n            }\r\n\r\n            // START ALL CORDOVA PLUGINS CONFIGURATIONS\r\n            try{\r\n                // lock the orientation of the device to 'PORTRAIT'\r\n                screen.orientation.lock('portrait');\r\n            }\r\n            catch(err){}\r\n\r\n            try{\r\n                await new Promise(function(resolve, reject){\r\n                    // Hide system UI and keep it hidden\r\n                    AndroidFullScreen.immersiveMode(resolve, reject);\r\n                });\r\n            }\r\n            catch(err){}\r\n\r\n            try { // START ALL THE CORDOVA PLUGINS CONFIGURATION WHICH REQUIRE PROMISE SYNTAX\r\n\r\n                // create the pouchdb app database\r\n                utopiasoftware[utopiasoftware_app_namespace].model.appDatabase = new PouchDB('mapteazerpuzzle.db', {\r\n                    adapter: 'cordova-sqlite',\r\n                    location: 'default',\r\n                    androidDatabaseImplementation: 2\r\n                });\r\n\r\n                // load the game settings data stored in the app database\r\n                try{\r\n                    utopiasoftware[utopiasoftware_app_namespace].model.gameSettings =\r\n                        await utopiasoftware[utopiasoftware_app_namespace].gameSettingsOperations.loadGameSettingsData();\r\n                }\r\n                catch(err2){}\r\n            }\r\n            catch(err){\r\n                console.log(\"APP LOADING ERROR\", err);\r\n            }\r\n            finally{\r\n                 // set status bar color\r\n                 StatusBar.backgroundColorByHexString(\"#363E7C\");\r\n                 navigator.splashscreen.hide(); // hide the splashscreen\r\n                 utopiasoftware[utopiasoftware_app_namespace].model.isAppReady = true; // flag that app is fully loaded and ready\r\n            }\r\n\r\n        }); // end of ons.ready()\r\n\r\n    },\r\n\r\n\r\n    /**\r\n     * this is the view-model/controller for the Puzzle Menu page\r\n     */\r\n    puzzleMenuPageViewModel: {\r\n\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            async function loadPageOnAppReady() {\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if (!ons.isReady() || utopiasoftware[utopiasoftware_app_namespace].model.isAppReady === false) {\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // show page process loader\r\n                $('#puzzle-menu-page .process-loader').css(\"display\", \"block\");\r\n                // update the Puzzle Menu Settings using the game settings saved by the user\r\n                $('#puzzle-menu-page #puzzle-menu-background-music-switch').get(0).checked =\r\n                    utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.backgroundMusicOn;\r\n                $('#puzzle-menu-page #puzzle-menu-sound-effects-switch').get(0).checked =\r\n                    utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.soundEffectsOn;\r\n                $('#puzzle-menu-page #puzzle-menu-puzzle-hints-switch').get(0).checked =\r\n                    utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.puzzleHintsOn;\r\n\r\n                // hide page process loader\r\n                $('#puzzle-menu-page .process-loader').css(\"display\", \"none\");\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: async function(){\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is destroyed\r\n         */\r\n        pageDestroy: function(){\r\n\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered whenever the puzzle menu is opened\r\n         */\r\n        async puzzleMenuOpened(){\r\n            // flag that the puzzle menu has been opened\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"puzzle-menu:opened\");\r\n            // call all the listeners registered for this lifecycle stage\r\n            return new Promise(function(resolve, reject){\r\n\r\n                setTimeout(function(){\r\n                    // return the values gotten from the registered listeners as the resolved value of the Promise\r\n                    resolve(utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"puzzle-menu:opened\", []));\r\n                }, 0);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * method is triggered whenever the puzzle menu is closed\r\n         */\r\n        async puzzleMenuClosed(){\r\n            // flag that the puzzle menu has been closed\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"puzzle-menu:closed\");\r\n            // call all the listeners registered for this lifecycle stage\r\n            return new Promise(function(resolve, reject){\r\n\r\n                setTimeout(function(){\r\n                    // return the values gotten from the registered listeners as the resolved value of the Promise\r\n                    resolve(utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"puzzle-menu:closed\", []));\r\n                }, 0);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for when the Exit Button on the menu is clicked\r\n         * @returns {Promise<void>}\r\n         */\r\n        async exitButtonClicked(){\r\n            // flag that Exit Button on the puzzle menu has been clicked\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"puzzle-menu:exit-clicked\");\r\n\r\n            // call all the listeners registered for this lifecycle stage\r\n            await new Promise(function(resolve, reject){\r\n\r\n                setTimeout(function(){\r\n                    // return the values gotten from the registered listeners as the resolved value of the Promise\r\n                    resolve(utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"puzzle-menu:exit-clicked\", []));\r\n                }, 0);\r\n            });\r\n\r\n            let exitIndex = -1; // holds the exit index gotten from the user's confirmation of exit\r\n\r\n\r\n            // flag that the app will soon exit if the listeners do not prevent it\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"app:will-exit\");\r\n\r\n            // call all the listeners registered for this lifecycle stage\r\n            let willExitEvent = await new Promise(function(resolve, reject){\r\n                setTimeout(function(){\r\n                    // lifecycle event object.\r\n                    // listeners can cancel the event that logically follows by setting its cancel property to true\r\n                    let eventObject = {};\r\n                    // define properties for the event object\r\n                    eventObject = Object.defineProperties(eventObject, {\r\n                        \"canCancel\": {\r\n                            value: true,\r\n                            enumerable: true,\r\n                            configurable: false,\r\n                            writable: false\r\n                        },\r\n                        \"isCanceled\": {\r\n                            get: function(){\r\n                                return typeof this.cancel === \"boolean\" ? this.cancel : new Boolean(this.cancel).valueOf();\r\n                            }.bind(eventObject),\r\n                            set: function(cancellation){},\r\n                            enumerable: true,\r\n                            configurable: false\r\n                        },\r\n                        \"cancel\": {\r\n                            value: false,\r\n                            enumerable: true,\r\n                            configurable: false,\r\n                            writable: true\r\n                        },\r\n                        \"warningMessage\": {\r\n                            enumerable: true,\r\n                            configurable: false,\r\n                            writable: true\r\n                        }\r\n                    });\r\n\r\n                    // emit the lifecycle stage event to the listeners\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"app:will-exit\", [eventObject]);\r\n                    // resolve this promise with the event object\r\n                    resolve(eventObject);\r\n                }, 0); // end of setTimeout\r\n            });\r\n\r\n            // check if any listener whens to forestall an exit\r\n            if(willExitEvent.isCanceled === true){ // listener wants it canceled\r\n                exitIndex = await ons.notification.confirm('',\r\n                    {title: '<ons-icon icon=\"md-alert-triangle\" style=\"color: #3f51b5\" size=\"33px\"></ons-icon> <span style=\"color: #3f51b5; display: inline-block; margin-left: 1em;\">Warning</span>',\r\n                        messageHTML: `${willExitEvent.warningMessage}<br><br>Do you want to close the app?`,\r\n                        buttonLabels: ['No', 'Yes'], modifier: 'utopiasoftware-alert-dialog'});\r\n            }\r\n            else{ // no listener wants to cancel, so find out directly from user if they want to exit\r\n                exitIndex = await ons.notification.confirm('Do you want to close the app?', {title: 'Exit App',\r\n                    buttonLabels: ['No', 'Yes'], modifier: 'utopiasoftware-alert-dialog'}); // Ask for confirmation\r\n            }\r\n\r\n            // check if the user decided to exit the app\r\n            if (exitIndex === 1) { // user want to exit\r\n                // flag that the app has exited\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"app:exited\");\r\n                // notify all listeners that app has exited\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                emit(\"app:exited\", []);\r\n                navigator.app.exitApp(); // close/exit the app\r\n            }\r\n            else{ // user does not want to exit\r\n                // flag that the app NOT EXITED\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.goto(\"app:no-exit\");\r\n                // notify all listeners that app NOT EXITED\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                emit(\"app:no-exit\", []);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for when the Background Music switch is clicked\r\n         * @returns {Promise<void>}\r\n         */\r\n        async backgroundMusicSwitchClicked(){\r\n\r\n            // get the current state/status of the background music switch\r\n            var switchOn =  $('#puzzle-menu-page #puzzle-menu-background-music-switch').get(0).checked;\r\n            // update the transient and persistent game settings data with the current state of the switch\r\n            utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.backgroundMusicOn = switchOn;\r\n\r\n            utopiasoftware[utopiasoftware_app_namespace].gameSettingsOperations.\r\n            saveGameSettingsData(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings);\r\n\r\n            // flag that Background Music Switch on the puzzle menu has been clicked\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n            goto(\"puzzle-menu:background-music-clicked\");\r\n\r\n            // call all the listeners registered for this lifecycle stage\r\n            return new Promise(function(resolve, reject){\r\n\r\n                    setTimeout(function(){\r\n                        // return the values gotten from the registered listeners as the resolved value of the Promise\r\n                        resolve(utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                        emit(\"puzzle-menu:background-music-clicked\", [{switchOn}]));\r\n                    }, 0);\r\n            });\r\n\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for when the Sound Effects switch is clicked\r\n         * @returns {Promise<void>}\r\n         */\r\n        async soundEffectsSwitchClicked(){\r\n\r\n            // get the current state/status of the Sound Effects switch\r\n            var switchOn =  $('#puzzle-menu-page #puzzle-menu-sound-effects-switch').get(0).checked;\r\n            // update the transient and persistent game settings data with the current state of the switch\r\n            utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.soundEffectsOn = switchOn;\r\n\r\n            utopiasoftware[utopiasoftware_app_namespace].gameSettingsOperations.\r\n            saveGameSettingsData(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings);\r\n\r\n            // flag that Sound Effects Switch on the puzzle menu has been clicked\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n            goto(\"puzzle-menu:sound-effects-clicked\");\r\n\r\n            // call all the listeners registered for this lifecycle stage\r\n            return new Promise(function(resolve, reject){\r\n\r\n                setTimeout(function(){\r\n                    // return the values gotten from the registered listeners as the resolved value of the Promise\r\n                    resolve(utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"puzzle-menu:sound-effects-clicked\", [{switchOn}]));\r\n                }, 0);\r\n            });\r\n\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for when the Puzzle Hints switch is clicked\r\n         * @returns {Promise<void>}\r\n         */\r\n        async puzzleHintsSwitchClicked(){\r\n\r\n            // get the current state/status of the Puzzle Hints switch\r\n            var switchOn =  $('#puzzle-menu-page #puzzle-menu-puzzle-hints-switch').get(0).checked;\r\n            // update the transient and persistent game settings data with the current state of the switch\r\n            utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.puzzleHintsOn = switchOn;\r\n\r\n            utopiasoftware[utopiasoftware_app_namespace].gameSettingsOperations.\r\n            saveGameSettingsData(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings);\r\n\r\n            // flag that Puzzle Hints Switch on the puzzle menu has been clicked\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n            goto(\"puzzle-menu:puzzle-hints-clicked\");\r\n\r\n            // call all the listeners registered for this lifecycle stage\r\n            return new Promise(function(resolve, reject){\r\n\r\n                setTimeout(function(){\r\n                    // return the values gotten from the registered listeners as the resolved value of the Promise\r\n                    resolve(utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                    emit(\"puzzle-menu:puzzle-hints-clicked\", [{switchOn}]));\r\n                }, 0);\r\n            });\r\n\r\n        },\r\n\r\n        /**\r\n         * method is used to safely toggle the Puzzle Menu open or close\r\n         */\r\n        async tooglePuzzleMenu(){\r\n            // toggle the side-menu i.e. the puzzle menu\r\n            return await $('#side-menu').get(0).toggle();\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * this is the view-model/controller for the Puzzle Levels page\r\n     */\r\n    puzzleLevelsPageViewModel: {\r\n\r\n        /**\r\n         * property is an object that holds configuration set up for the app\r\n         */\r\n        gameConfigObject: null,\r\n\r\n        /**\r\n         * property flags if the audio effects and sounds are ready to be\r\n         */\r\n        isAudioReady: false,\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            async function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware[utopiasoftware_app_namespace].model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#app-main-navigator').get(0).topPage.onDeviceBackButton =\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzleLevelsPageViewModel.backButtonClicked;\r\n\r\n                // get the app game config from the stored json data\r\n                let serverResponse = await Promise.resolve($.ajax(\r\n                    {\r\n                        url: \"game-config.json\",\r\n                        type: \"get\",\r\n                        contentType: false,\r\n                        dataType: \"text\",\r\n                        timeout: 240000, // wait for 4 minutes before timeout of request\r\n                        processData: false\r\n                    }\r\n                ));\r\n\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzleLevelsPageViewModel.gameConfigObject =\r\n                    JSON.parse(serverResponse); // convert the response to JSON object\r\n\r\n                let puzzleLevelContent = \"\"; // holds the contents to for the levels\r\n\r\n                // create the puzzle levels board/content\r\n                for(let index = 1; index <= utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    puzzleLevelsPageViewModel.gameConfigObject[\"config\"][\"total_levels\"]; index++){\r\n                    puzzleLevelContent +=\r\n                        `<div class=\"col-xs-1\" style=\"margin-top: 1em;\"></div>\r\n                            <div class=\"col-xs-3\" style=\"margin-top: 1em;\"\r\n                            onclick=\"utopiasoftware[utopiasoftware_app_namespace].controller.puzzleLevelsPageViewModel.\r\n                            loadPuzzleLevel(${index})\">\r\n                            <ons-ripple></ons-ripple>\r\n                            <img src=\"game-puzzle/level-${index}-puzzle-completed.png\" style=\"width: 90%; height: auto;\">\r\n                            <span style=\"display: block; width: 100%; text-align: justify; font-size: 0.9em; color: #F4C724;\r\n                            text-shadow: -1px -1px 2px #000000;\">\r\n                            LEVEL ${index}\r\n                            </span>\r\n                        </div>`;\r\n                }\r\n\r\n                $('#puzzle-levels-page #puzzle-levels-container').html(puzzleLevelContent); // append the content to the page\r\n\r\n\r\n                // check if background music has been enabled\r\n                if(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.backgroundMusicOn === true){ // background music is on\r\n                    // add background tune\r\n                    await new Promise(function(resolve, reject){\r\n                        window.plugins.NativeAudio.preloadComplex('puzzle-levels-background', 'audio/puzzles-select-level-background.mp3',\r\n                            1, 1, 0, resolve, resolve);\r\n                    });\r\n\r\n                    // start playing background tune in a loop\r\n                    await new Promise(function(resolve, reject){\r\n                        window.plugins.NativeAudio.loop('puzzle-levels-background', resolve, resolve);\r\n                    });\r\n                }\r\n\r\n                await $('#loader-modal').get(0).hide(); // hide loader\r\n\r\n                // set that audio use is ready\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    puzzleLevelsPageViewModel.isAudioReady = true;\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: async function(){\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            //window.SoftInputMode.set('adjustPan'); // let the window/view-port 'pan' when the soft keyboard is displayed\r\n\r\n            // listen for when the background music switch on the puzzle menu is clicked\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n            on(\"puzzle-menu:background-music-clicked\", utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                puzzleLevelsPageViewModel.backgroundMusicSwitchClickedListener);\r\n\r\n            // check that audio is ready\r\n            if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                puzzleLevelsPageViewModel.isAudioReady === true){\r\n                if(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.backgroundMusicOn === true){ // background music is on\r\n                    // add background tune\r\n                    await new Promise(function(resolve, reject){\r\n                        window.plugins.NativeAudio.preloadComplex('puzzle-levels-background',\r\n                            'audio/puzzles-select-level-background.mp3',\r\n                            1, 1, 0, resolve, resolve);\r\n                    });\r\n\r\n                    // start playing background tune in a loop\r\n                    await new Promise(function(resolve, reject){\r\n                        window.plugins.NativeAudio.loop('puzzle-levels-background', resolve, resolve);\r\n                    });\r\n                }\r\n            }\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: async function(){\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            // window.SoftInputMode.set('adjustResize'); // let the view 'resize' when the soft keyboard is displayed\r\n\r\n            // remove listener for when the background music switch on the puzzle menu is clicked\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n            off(\"puzzle-menu:background-music-clicked\", utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                puzzleLevelsPageViewModel.backgroundMusicSwitchClickedListener);\r\n\r\n            if(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.backgroundMusicOn === true) { // background music is on\r\n                // stop playing the background music\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.stop('puzzle-levels-background', resolve, resolve);\r\n                });\r\n                // unload playing the background music\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.unload('puzzle-levels-background', resolve, resolve);\r\n                });\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is destroyed\r\n         */\r\n        pageDestroy: function(){\r\n\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when the device back button is clicked OR a similar action is triggered\r\n         */\r\n        async backButtonClicked(){\r\n            // toggle the puzzle menu\r\n            await utopiasoftware[utopiasoftware_app_namespace].controller.puzzleMenuPageViewModel.tooglePuzzleMenu();\r\n        },\r\n\r\n        /**\r\n         * method is used to load the puzzle level details\r\n         */\r\n        async loadPuzzleLevel(levelNumber){\r\n            // displaying prepping message\r\n            $('#loader-modal-message').html(\"Loading Puzzle Level...\");\r\n            await $('#loader-modal').get(0).show(); // show loader\r\n\r\n            // check if background music is enabled\r\n            if(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.backgroundMusicOn === true) { // background music is on\r\n                // stop playing the background music\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.stop('puzzle-levels-background', resolve, resolve);\r\n                });\r\n                // unload the background music\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.unload('puzzle-levels-background', resolve, resolve);\r\n                });\r\n            }\r\n\r\n            // load the puzzle level page with the required page data\r\n            await $('#app-main-navigator').get(0).pushPage(\"puzzle-page.html\", {\r\n                data: {puzzleData: {levelNumber: levelNumber}}});\r\n        },\r\n\r\n        /**\r\n         * method id used to listen got\r\n         * @param eventArgs\r\n         * @returns {Promise<void>}\r\n         */\r\n        async backgroundMusicSwitchClickedListener(eventArgs){\r\n\r\n            var event = eventArgs[0]; // get the event object from eventArgs array\r\n\r\n            // check if background sound is being turned on or off\r\n            if(event.switchOn === true){ // background music is being turned on\r\n                // add background tune\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.preloadComplex('puzzle-levels-background',\r\n                        'audio/puzzles-select-level-background.mp3',\r\n                        1, 1, 0, resolve, resolve);\r\n                });\r\n\r\n                // start playing background tune in a loop\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.loop('puzzle-levels-background', resolve, resolve);\r\n                });\r\n            }\r\n            else{ // background music is being turned off\r\n                // stop playing the background music\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.stop('puzzle-levels-background', resolve, resolve);\r\n                });\r\n                // unload the background music\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.unload('puzzle-levels-background', resolve, resolve);\r\n                });\r\n            }\r\n\r\n\r\n        },\r\n    },\r\n\r\n\r\n    /**\r\n     * this is the view-model/controller for the Puzzle page\r\n     */\r\n    puzzlePageViewModel: {\r\n\r\n        /**\r\n         * property is the Draggable-Droppable object used for the puzzle\r\n         */\r\n        draggableDroppableObject: null,\r\n\r\n        /**\r\n         * property is used to hold the element that is being dragged\r\n         */\r\n        dragStartSource: null,\r\n\r\n        /**\r\n         * properety is used to hold the dropzone container for the\r\n         * element that was being dragged\r\n         */\r\n        jqueryDropZone: null,\r\n\r\n        /**\r\n         * property is used to hold the container for the element that is being dragged\r\n         */\r\n        dragStartContainer: null,\r\n\r\n        /**\r\n         * property is used to keep track of the total number of moves used to\r\n         * complete a puzzle\r\n         */\r\n        moveCounter: 0,\r\n\r\n        /**\r\n         * property holds the level number for the current puzzle level being played\r\n         */\r\n        levelNumber: 0,\r\n\r\n        /**\r\n         * property holds the single-side dimension for a\r\n         * puzzle piece in the puzzle display area\r\n         */\r\n        puzzlePieceDimension: 0,\r\n\r\n        /**\r\n         * property holds an instance of EasyTimer which is the timer used to track\r\n         * how long it takes the user to complete a puzzle\r\n         */\r\n        puzzleTimer: null,\r\n\r\n        /**\r\n         * property holds a Map object that is used to keep track of the\r\n         * user's puzzle answer sheet i.e. if the user has completed the puzzle\r\n         */\r\n        puzzleAnswerSheetMap: null,\r\n\r\n        /**\r\n         * property holds a Map object that is used to keep track of\r\n         * all image assets used by this puzzle\r\n         */\r\n        puzzleImageAssetsMap: null,\r\n\r\n        /**\r\n         * property is a flag that indicates if the user has completed the level.\r\n         * A value of true means the user has completed the level or a value of\r\n         * false means the level has not been completed\r\n         */\r\n        puzzleCompleted: false,\r\n\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            async function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware[utopiasoftware_app_namespace].model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#app-main-navigator').get(0).topPage.onDeviceBackButton =\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.backButtonClicked;\r\n\r\n                // set the level number of the puzzle to be loaded\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.levelNumber =\r\n                    window.parseInt($('#app-main-navigator').get(0).topPage.data.puzzleData.levelNumber);\r\n                // flag that puzzle has not been completed\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleCompleted = false;\r\n                // set the puzzle move counter to zero\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.moveCounter = 0;\r\n\r\n                // listen for when the puzzle menu is opened\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                on(\"puzzle-menu:opened\", utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    puzzlePageViewModel.puzzleMenuOpenedListener);\r\n\r\n                // listen for when the puzzle menu is closed\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                on(\"puzzle-menu:closed\", utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    puzzlePageViewModel.puzzleMenuClosedListener);\r\n\r\n                // listen for when the app desires/wants to exit\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                on(\"app:will-exit\", utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    puzzlePageViewModel.appWillExitListener);\r\n\r\n                // listen for when the app is NO LONGER EXITING\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n                on(\"app:no-exit\", utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    puzzlePageViewModel.appNoExitListener);\r\n\r\n                // check if background music is enabled\r\n                if(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.backgroundMusicOn === true) { // background music is on\r\n                    // add puzzle background tune\r\n                    await new Promise(function(resolve, reject){\r\n                        window.plugins.NativeAudio.preloadComplex('puzzle-background', 'audio/puzzle-level-background.mp3',\r\n                            1, 1, 0, resolve, resolve);\r\n                    });\r\n\r\n                    // start playing background tune in a loop\r\n                    await new Promise(function(resolve, reject){\r\n                        window.plugins.NativeAudio.loop('puzzle-background', resolve, resolve);\r\n                    });\r\n                }\r\n\r\n                // instantiate the puzzleAnswerSheet js Map\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleAnswerSheetMap =\r\n                    new Map();\r\n                // use a for loop to set all the answers in the puzzleAnswerSheet to false\r\n                for(let index = 0; index < utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    puzzleLevelsPageViewModel.gameConfigObject[\"levels\"]\r\n                    [\"\" + utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.levelNumber]\r\n                    [\"total_puzzle_pieces\"]; index++){\r\n\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleAnswerSheetMap.\r\n                    set((\"\" + (index + 1)), false);\r\n                }\r\n\r\n                // instantiate the puzzle image assets js Map\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap =\r\n                    new Map();\r\n                // set the puzzle-completed image assets\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                set(\"puzzle-completed\", new Image());\r\n                if(utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                get(\"puzzle-completed\").decoding){\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                    get(\"puzzle-completed\").decoding = 'async';\r\n                }\r\n\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                get(\"puzzle-completed\").src =\r\n                    `game-puzzle/level-${utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.levelNumber}-puzzle-completed.png`;\r\n\r\n                // set the arrays used for loading all required puzzle 'blank' and 'answer' pieces\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                set(\"puzzle-block-pieces\", []).set(\"puzzle-answer-pieces\", []);\r\n                // initialise the puzzle 'block' & 'answer' pieces arrays with their image assets\r\n                for(let index = 0; index < utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    puzzleLevelsPageViewModel.gameConfigObject[\"levels\"]\r\n                    [\"\" + utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.levelNumber]\r\n                    [\"total_puzzle_pieces\"]; index++){\r\n\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                    get(\"puzzle-block-pieces\")[index] = new Image();\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                    get(\"puzzle-answer-pieces\")[index] = new Image();\r\n\r\n                    if(utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                    get(\"puzzle-completed\").decoding){\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                        get(\"puzzle-block-pieces\")[index].decoding = 'async';\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                        get(\"puzzle-answer-pieces\")[index].decoding = 'async';\r\n                    }\r\n\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                    get(\"puzzle-block-pieces\")[index].src =\r\n                        `game-puzzle/level-${utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.levelNumber}-block-${index + 1}-puzzle.png`;\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                    get(\"puzzle-answer-pieces\")[index].src =\r\n                        `game-puzzle/level-${utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.levelNumber}-block-${index + 1}-answer.png`;\r\n                    // identify the puzzle slot value for each 'answer' puzzle piece\r\n                    // the puzzle slot value helps to identify if the puzzle piece has been placed in the right place\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                    get(\"puzzle-answer-pieces\")[index].puzzleSlotValue = index + 1;\r\n                }\r\n\r\n                // randomise the created 'answer' puzzle pieces so they don't arrive in puzzle in correct order/sequence\r\n                Random.shuffle(utopiasoftware[utopiasoftware_app_namespace].randomisationEngine,\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                    get(\"puzzle-answer-pieces\"));\r\n\r\n                // calculate the dimensions of the puzzle display area on the user's device\r\n                let puzzleDisplayHeight = Math.floor($('#puzzle-page #puzzle-page-puzzle-display-area').height());\r\n                let puzzleDisplayWidth = Math.floor($('#puzzle-page #puzzle-page-puzzle-display-area').width());\r\n                // get a variable to hold the puzzle piece single dimension. Since ALL puzzle pieces are square, dimensions are equal\r\n                let puzzlePieceDimension = 0;\r\n\r\n                // check if the puzzle display Height is larger than or equal to the display width\r\n                if(puzzleDisplayHeight >= puzzleDisplayWidth){ // height is >= width\r\n                    // get the space difference between the height and width and use to set appropriate padding for the puzzle content\r\n                    $('#puzzle-page #puzzle-page-puzzle-display-area').css({\r\n                        \"padding-top\": Math.floor((puzzleDisplayHeight - puzzleDisplayWidth) / 2) + \"px\",\r\n                        \"padding-bottom\": Math.floor((puzzleDisplayHeight - puzzleDisplayWidth) / 2) + \"px\"\r\n                    });\r\n                    // get the dimension for the puzzle pieces\r\n                    puzzlePieceDimension = Math.floor(puzzleDisplayWidth / Math.sqrt(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        puzzleLevelsPageViewModel.gameConfigObject[\"levels\"]\r\n                        [\"\" + utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.levelNumber]\r\n                        [\"total_puzzle_pieces\"]));\r\n                }\r\n                else{ // height is < width\r\n                    // get the space difference between the width and height and use to set appropriate padding for the puzzle content\r\n                    $('#puzzle-page #puzzle-page-puzzle-display-area').css({\r\n                        \"padding-left\": Math.floor((puzzleDisplayWidth - puzzleDisplayHeight) / 2) + \"px\",\r\n                        \"padding-right\": Math.floor((puzzleDisplayWidth - puzzleDisplayHeight) / 2) + \"px\"\r\n                    });\r\n                    // get the dimension for the puzzle pieces\r\n                    puzzlePieceDimension = Math.floor(puzzleDisplayHeight / Math.sqrt(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        puzzleLevelsPageViewModel.gameConfigObject[\"levels\"]\r\n                        [\"\" + utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.levelNumber]\r\n                        [\"total_puzzle_pieces\"]));\r\n                }\r\n\r\n                // set the calculated puzzle piece dimension to the appropriate view-model property\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                    puzzlePieceDimension = puzzlePieceDimension;\r\n\r\n                // append the 'blank' puzzle pieces to the puzzle display content\r\n                for(let puzzlePiecesCounter = 0, rowCounter = 0,\r\n                        totalRows = Math.sqrt(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    puzzleLevelsPageViewModel.gameConfigObject[\"levels\"]\r\n                    [\"\" + utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.levelNumber]\r\n                    [\"total_puzzle_pieces\"]); rowCounter < totalRows; rowCounter++){ // for loop to generate puzzle display rows\r\n\r\n                    let puzzleRowContent = '<div style=\"display: block; margin:0; padding: 0; width: 100%; white-space: nowrap\">';\r\n\r\n                    // for loop to generate puzzle display columns\r\n                    for(let columnCounter = 0, totalColumns = totalRows; columnCounter < totalColumns; columnCounter++){\r\n                        let puzzleColumnContent =\r\n                            `<span class=\"puzzle-pieces-container puzzle-drop-zone\"\r\n                                style=\"display: inline-block; margin: 0; padding: 0; width: ${puzzlePieceDimension}px;\"\r\n                                data-puzzle-slot=\"${puzzlePiecesCounter + 1}\">\r\n                            <img src=\"${utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.\r\n                            get(\"puzzle-block-pieces\")[puzzlePiecesCounter].src}\" class=\"puzzle-piece-holder\" style=\"width: 100%; height: auto;\">\r\n                        </span>`;\r\n\r\n                        // add the column content to the row content\r\n                        puzzleRowContent += puzzleColumnContent;\r\n                        // increase the puzzle pieces counter by 1\r\n                        puzzlePiecesCounter += 1;\r\n                    } // end of column generator for-loop\r\n\r\n                    // complete the row content\r\n                    puzzleRowContent += '</div>';\r\n                    // append the generate row content to the puzzle-display-area\r\n                    $('#puzzle-page #puzzle-page-puzzle-display-area').append(puzzleRowContent);\r\n\r\n                } // end of row generator for-loop\r\n\r\n\r\n                // insert two 'answer' puzzle pieces into two puzzle trays\r\n                for(let index = 0; index < 2; index++){\r\n                    // get the puzzle 'answer' piece to be added\r\n                    let puzzleAnswerPiece = utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    puzzlePageViewModel.puzzleImageAssetsMap.\r\n                    get(\"puzzle-answer-pieces\").pop();\r\n\r\n                    // add the puzzle 'answer' piece to the tray\r\n                    $('#puzzle-page .puzzle-pieces-tray').eq(index).\r\n                    html(`<img src=\"${puzzleAnswerPiece.src}\" class=\"puzzle-pieces\" style=\"height: 100%; width: auto\" \r\n                         data-puzzle-slot=\"${puzzleAnswerPiece.puzzleSlotValue}\">`);\r\n\r\n                }\r\n\r\n                // create the Draggable.Droppable object\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.draggableDroppableObject =\r\n                    new Draggable.Droppable([...$('#puzzle-page .puzzle-pieces-container').get()],\r\n                        {\r\n                            draggable: 'img.puzzle-pieces',\r\n                            scrollable: {\r\n                                sensitivity: 30,\r\n                                scrollableElements: [...$('#puzzle-page .puzzle-pieces-carousel').get()]\r\n                            },\r\n                            mirror: {\r\n                                constrainDimensions: false,\r\n                                appendTo: 'body'\r\n                            },\r\n                            dropzone: '#puzzle-page .puzzle-drop-zone'\r\n                        }).\r\n                    removePlugin(Draggable.Plugins.Focusable);\r\n\r\n                /**\r\n                 * function uses the \"drag:start\" event to track which\r\n                 * exact puzzle piece is being moved.\r\n                 */\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.draggableDroppableObject.\r\n                on(\"drag:start\", function(dragStartEvent){\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        puzzlePageViewModel.dragStartSource = $(dragStartEvent.source);\r\n                });\r\n\r\n                /**\r\n                 * function uses the \"droppable:start\" event to track when a puzzle piece has started to get dropped.\r\n                 * The method is used to check the puzzle movements of puzzle pieces\r\n                 */\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.draggableDroppableObject.\r\n                    on(\"droppable:start\", function(droppableStartEvent){\r\n                        // get the initial container the element/puzzle piece being dropped originates from\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartContainer = $(droppableStartEvent.dropzone);\r\n\r\n                        // mark the exact time the drop-start commenced\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartContainer.puzzleStartDropStamp = Date.now();\r\n                        // flag that the puzzle piece has NOT been dropped yet\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartContainer.puzzleDropped = false;\r\n\r\n                        // check that the initial container for the puzzle piece is NOT a 'puzzle-pieces-tray'\r\n                        if(! utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        puzzlePageViewModel.dragStartContainer.is('.puzzle-pieces-tray')){ // initial container is NOT a 'puzzle-pieces-tray'\r\n                            // get the puzzle slot value attached to the puzzle piece container.\r\n                            // the value represents the position of the correct puzzle piece needed to complete the puzzle\r\n                            let puzzleSlotValue = utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartContainer.attr('data-puzzle-slot');\r\n\r\n                            // remove all puzzle hint animations from the container\r\n                            $(`.puzzle-drop-zone[data-puzzle-slot=\"${puzzleSlotValue}\"]`, $thisPage).\r\n                            removeClass(\"animated shake pulse\");\r\n                        }\r\n                        else{ // initial container is a 'puzzle-pieces' tray\r\n                             // get the puzzle-tray-slot value attached to the puzzle-pieces-tray\r\n                            // the value identifies which puzzle tray is being accessed\r\n                            let puzzleTraySlotValue = utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartContainer.attr('data-puzzle-tray-slot');\r\n\r\n                            // remove all puzzle animations from the tray container\r\n                            $(`.puzzle-drop-zone.puzzle-pieces-tray[data-puzzle-tray-slot=\"${puzzleTraySlotValue}\"]`, $thisPage).\r\n                            removeClass(\"animated flash\");\r\n                        }\r\n                    });\r\n\r\n                /**\r\n                 * function uses the \"droppable:dropped\" event to track when a puzzle piece has been dropped.\r\n                 * The method is used to check the puzzle movements of puzzle pieces\r\n                 */\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.draggableDroppableObject.\r\n                    on(\"droppable:dropped\", function(droppableDroppedEvent){\r\n\r\n                        // get the container which the element/puzzle piece is being dropped into\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.jqueryDropZone = $(droppableDroppedEvent.dropzone);\r\n\r\n                        // check if the puzzle piece is being dropped in a puzzle-pieces-tray\r\n                        if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        puzzlePageViewModel.jqueryDropZone.is('.puzzle-pieces-tray')){ // the puzzle-piece is being dropped in a puzzle-pieces-tray\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.jqueryDropZone.isPuzzlePieceTray = true; // flag that the puzzle-piece was dropped in a puzzle-pieces-tray\r\n                            // flag the a valid puzzle movement drop has NOT taken place. Because the puzzle piece was moved to a tray\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleDropped = false;\r\n                            // set the puzzle dropped time stamp to zero, since a valid puzzle move did NOT take place\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleDroppedStamp = 0;\r\n                        }\r\n                        else{\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.jqueryDropZone.isPuzzlePieceTray = false; // flag that the puzzle-piece was NOT dropped in a puzzle-pieces-tray\r\n\r\n                            // flag the a valid puzzle movement drop has taken place\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleDropped = true;\r\n                            // set the time the puzzle-piece was dropped to the same drop-start time.\r\n                            // THIS LOGIC IS VERY IMPORTANT TO ENABLING THE COMPLETION OF A VALID PUZZLE MOVEMENT TRACKING\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleDroppedStamp =\r\n                                utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                    puzzlePageViewModel.dragStartContainer.puzzleStartDropStamp;\r\n                        }\r\n                    });\r\n\r\n                /**\r\n                 * function uses the \"droppable:stop\" event to track when a puzzle piece has finished been dropped.\r\n                 * The method is used to check the puzzle movements of puzzle pieces\r\n                 */\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.draggableDroppableObject.\r\n                    on(\"droppable:stop\", function(droppableStopEvent){\r\n\r\n                        // check if this is the completion of a valid puzzle movement\r\n                        // This is done by check that the movement was flagged as a puzzleDropped action and\r\n                        // that the puzzle 'start-drop' and puzzle 'dropped' time stamps are exactly the same value\r\n                        if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleDropped === true &&\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleStartDropStamp ===\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleDroppedStamp){ // this is the completion of a valid puzzle movement\r\n\r\n                            // get the puzzle slot value attached to the container where the puzzle piece was finally dropped\r\n                            let puzzleSlotValue = $(droppableStopEvent.dropzone).attr('data-puzzle-slot');\r\n\r\n                            // check if the puzzle slot value attached to the puzzle piece AND\r\n                            // the puzzle slot value gotten from the puzzle final drop container are equal\r\n                            if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartSource.attr('data-puzzle-slot') == puzzleSlotValue){ // the puzzle slot values are equal\r\n                                // since the values match, this is the correct puzzle piece movement\r\n\r\n                                // check if user wants puzzle-hints\r\n                                if(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.puzzleHintsOn === true){\r\n                                    // add positive animation to container\r\n                                    $(`.puzzle-drop-zone[data-puzzle-slot=\"${puzzleSlotValue}\"]`, $thisPage).\r\n                                    addClass(\"animated pulse\");\r\n                                }\r\n\r\n                                // update the puzzleAnswerSheet map object to indicate this answer was correct\r\n                                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleAnswerSheetMap.\r\n                                set(puzzleSlotValue, true);\r\n\r\n                                // call the method to check the users answer sheet. Call in a separate event queue\r\n                                window.\r\n                                setTimeout(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                    puzzlePageViewModel.checkAnswerSheet, 0);\r\n                            }\r\n                            else{\r\n                                // check if user wants puzzle-hints\r\n                                if(utopiasoftware[utopiasoftware_app_namespace].model.gameSettings.puzzleHintsOn === true){\r\n                                    // add negative animation to container\r\n                                    $(`.puzzle-drop-zone[data-puzzle-slot=\"${puzzleSlotValue}\"]`, $thisPage).\r\n                                    addClass(\"animated shake\");\r\n                                }\r\n\r\n                                // update the puzzleAnswerSheet map object to indicate this answer was wrong\r\n                                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleAnswerSheetMap.\r\n                                set(puzzleSlotValue, false);\r\n                            }\r\n                        }\r\n\r\n                        /*if(! $(droppableStopEvent.dropzone).is('.puzzle-pieces-tray')){\r\n                            let puzzleSlotValue = $(droppableStopEvent.dropzone).attr('data-puzzle-slot');\r\n\r\n\r\n                            if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                samplePuzzlePageViewModel.dragStartSource.attr('data-puzzle-slot') == puzzleSlotValue){\r\n                                // add positive animation to container\r\n                                $(`.puzzle-drop-zone[data-puzzle-slot=\"${puzzleSlotValue}\"]`, $thisPage).\r\n                                addClass(\"animated pulse\");\r\n                            }\r\n                        }*/\r\n                    });\r\n\r\n                /**\r\n                 * function uses the \"droppable:stop\" event to track whether it should request the\r\n                 * addition of a new puzzle-piece to the puzzle-pieces tray\r\n                 */\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.draggableDroppableObject.\r\n                on(\"droppable:stop\", function(droppableStopEvent){\r\n\r\n                    // check if this is the completion of a valid puzzle movement\r\n                    // This is done by check that the movement was flagged as a puzzleDropped action and\r\n                    // that the puzzle 'start-drop' and puzzle 'dropped' time stamps are exactly the same value\r\n                    if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartContainer.puzzleDropped === true &&\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartContainer.puzzleStartDropStamp ===\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartContainer.puzzleDroppedStamp) { // this is the completion of a valid puzzle movement\r\n\r\n                        // check if the dragStartContainer is a puzzle-pieces tray\r\n                        if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartContainer.is('.puzzle-pieces-tray')){ // this is a puzzle-pieces tray\r\n\r\n                            // work in a separate event queue\r\n                            window.setTimeout(function(){\r\n                                // find a puzzle-pieces tray that is NOT occupied AND NOT the spare 3rd slot\r\n                                let emptyPuzzlePieceTray = $('#puzzle-page .puzzle-pieces-tray').get().\r\n                                find(function(arrayElem){\r\n                                    // check if puzzle tray is occupied\r\n                                    if($(arrayElem).children('.puzzle-pieces').length === 0){ // not occupied\r\n                                        if(! $(arrayElem).is('[data-puzzle-tray-slot=\"3\"]')){ // this is not the 3rd spare slot\r\n                                            return true; // return this element\r\n                                        }\r\n                                    }\r\n                                }); // end of Array.find()\r\n\r\n                                // check if an empty puzzle-pieces tray that fits the criteria was found\r\n                                if(emptyPuzzlePieceTray) { // an empty puzzle-pieces tray which fits the criteria was found\r\n                                    // add a new puzzle piece to the tray\r\n                                    utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                        puzzlePageViewModel.addPuzzlePiece($(emptyPuzzlePieceTray).attr(\"data-puzzle-tray-slot\"));\r\n                                }\r\n                            }, 0); // end of window.setTimeout()\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * function uses the \"droppable:stop\" event to track the\r\n                 * total number of puzzle moves the user makes, whether valid or invalid.\r\n                 */\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.draggableDroppableObject.\r\n                    on(\"droppable:stop\", function(droppableStopEvent){\r\n\r\n                        // increase the move counter value by 1\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.moveCounter += 1;\r\n                        // display the new value of the move counter to the user\r\n                        $('#puzzle-page .puzzle-moves-counter').\r\n                        html(utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.moveCounter);\r\n                    });\r\n\r\n                // append the style for the Draggable mirror element to the page\r\n                $('#puzzle-page').\r\n                append(`\r\n                <style>\r\n                    .draggable-mirror {\r\n                        width: ${utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                        puzzlePieceDimension}px;\r\n                        height: auto;\r\n                    }\r\n                </style>`);\r\n\r\n\r\n                // create the Puzzle Timer object\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer = new Timer();\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.\r\n                start({startValues: {secondTenths: 0, seconds: 0, minutes: 0, hours: 0, days: 0},\r\n                    precision: 'secondTenths'});\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.pause();\r\n\r\n                // add event listener for when timer value is updated\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.\r\n                addEventListener(\"secondTenthsUpdated\", function(timer){\r\n                    // update the timer counter display on the puzzle\r\n                    $('#puzzle-page .puzzle-timer-counter').\r\n                    html(utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.\r\n                    getTimeValues().toString(['hours', 'minutes', 'seconds', 'secondTenths']));\r\n                });\r\n\r\n                // add event listener for when timer value is paused\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.\r\n                addEventListener(\"paused\", utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    puzzlePageViewModel.puzzleTimerPausedListener);\r\n\r\n                // pause the puzzle level in order to begin. level starts when user hits \"Continue\" button\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.pausePuzzleLevel();\r\n                $('#loader-modal').get(0).hide(); // hide loader\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            //window.SoftInputMode.set('adjustPan'); // let the window/view-port 'pan' when the soft keyboard is displayed\r\n\r\n            // listen for when the background music switch on the puzzle menu is clicked\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n            on(\"puzzle-menu:background-music-clicked\", utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                puzzlePageViewModel.backgroundMusicSwitchClickedListener);\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: function(){\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            // window.SoftInputMode.set('adjustResize'); // let the view 'resize' when the soft keyboard is displayed\r\n\r\n            // remove listener for when the background music switch on the puzzle menu is clicked\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.appLifeCycleObservable.\r\n            off(\"puzzle-menu:background-music-clicked\", utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                puzzlePageViewModel.backgroundMusicSwitchClickedListener);\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is destroyed\r\n         */\r\n        pageDestroy: function(){\r\n            // destroy Draggable.Droppable object\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.draggableDroppableObject.destroy();\r\n            // destroy the dragged elements references & all dragged elements containers references\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.dragStartSource = null;\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.jqueryDropZone = null;\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.dragStartContainer = null;\r\n            // destroy the puzzle timer object\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.stop();\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer = null;\r\n            // destroy the answer sheet map object\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleAnswerSheetMap.clear();\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleAnswerSheetMap = null;\r\n            // destroy the puzzle image asserts map object\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap.clear();\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleImageAssetsMap = null;\r\n            // set the puzzle move counter to zero\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.moveCounter = 0;\r\n            // set the puzzle level number to zero\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.levelNumber = 0;\r\n            // set the puzzle piece dimension to zero\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                puzzlePieceDimension = 0;\r\n            // flag that puzzle has NOT been completed\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                puzzleCompleted = false;\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when the device back button is clicked OR a similar action is triggered\r\n         */\r\n        async backButtonClicked(){\r\n\r\n            // flag that the puzzle has not been completed\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                puzzleCompleted = false;\r\n\r\n            // pause puzzle timer\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.pause();\r\n\r\n            // toggle the puzzle menu\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                puzzleMenuPageViewModel.tooglePuzzleMenu();\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for when the puzzle timer is paused\r\n         *\r\n         * @param timer\r\n         * @returns {Promise<void>}\r\n         */\r\n        async puzzleTimerPausedListener(timer){\r\n\r\n            // check if puzzle has been completed\r\n            if(utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                puzzleCompleted !== true){ // puzzle has not been completed, so exit method\r\n                return;\r\n            }\r\n\r\n            // update the contents of the level completed modal\r\n            $('#puzzle-level-complete-modal .level-time').html(\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.\r\n                getTimeValues().toString(['hours', 'minutes', 'seconds', 'secondTenths'])\r\n            );\r\n            $('#puzzle-level-complete-modal .level-moves').html(\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.moveCounter\r\n            );\r\n\r\n            // show the level completed modal\r\n            $('#puzzle-level-complete-modal').get(0).show();\r\n        },\r\n\r\n        /**\r\n         * method is used to check the status of the users puzzle answer sheet.\r\n         * if all puzzle pieces have been place correctly, then the level is completed\r\n         * @returns {Promise<void>}\r\n         */\r\n        async checkAnswerSheet(){\r\n\r\n            // update the puzzleAnswerSheet map object to indicate this answer was correct\r\n            for(let entry of utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                puzzleAnswerSheetMap){\r\n                if(entry[1] === false){ // an answer is still wrong\r\n                    // flag that puzzle has NOT been completed\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                        puzzleCompleted = false;\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // flag that puzzle has been completed\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                puzzleCompleted = true;\r\n            // stop the entire to indicate that puzzle has completed\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.pause();\r\n            return;\r\n        },\r\n\r\n        /**\r\n         * method is used to add another 'answer' puzzle piece to the puzzle-pieces tray.\r\n         * This method is used AFTER the first 2 puzzle pieces have already been inserted.\r\n         * If there are no more puzzle pieces to add, this method does nothing\r\n         *\r\n         * @returns {Promise<void>}\r\n         */\r\n        async addPuzzlePiece(puzzleTraySlot){\r\n\r\n            // check if there are still puzzle pieces to add\r\n            if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n            puzzlePageViewModel.puzzleImageAssetsMap.get(\"puzzle-answer-pieces\").length === 0){ // no more puzzle pieces\r\n                return; // exit method\r\n            }\r\n\r\n            // get the puzzle-pieces tray where the puzzle piece is to be added\r\n            let puzzlePiecesTray = $(`#puzzle-page .puzzle-pieces-tray[data-puzzle-tray-slot=\"${puzzleTraySlot}\"]`).eq(0);\r\n\r\n            // get the puzzle 'answer' piece to be added\r\n            let puzzleAnswerPiece = utopiasoftware[utopiasoftware_app_namespace].controller.\r\n            puzzlePageViewModel.puzzleImageAssetsMap.\r\n            get(\"puzzle-answer-pieces\").pop();\r\n\r\n            // remove the retrieved puzzle-pieces tray form the collection of draggable containers\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                puzzlePageViewModel.draggableDroppableObject.removeContainer(puzzlePiecesTray.get(0));\r\n\r\n            // add the puzzle 'answer' piece to the tray\r\n            puzzlePiecesTray.html(`<img src=\"${puzzleAnswerPiece.src}\" class=\"puzzle-pieces\" style=\"height: 100%; width: auto\" \r\n                         data-puzzle-slot=\"${puzzleAnswerPiece.puzzleSlotValue}\">`);\r\n\r\n            // re-add the retrieved puzzle-pieces tray form the collection of draggable containers\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n            puzzlePageViewModel.draggableDroppableObject.addContainer(puzzlePiecesTray.get(0));\r\n\r\n            // add the puzzle animation fo a new puzzle piece inclusion\r\n            puzzlePiecesTray.addClass(\"animated flash\");\r\n            return;\r\n        },\r\n\r\n        /**\r\n         * pauses the puzzle level. Suspends the puzzle timer and\r\n         * displays the pause-puzzle modal\r\n         *\r\n         * @returns {Promise<void>}\r\n         */\r\n        async pausePuzzleLevel(){\r\n\r\n            // flag that the puzzle has not been completed\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                puzzleCompleted = false;\r\n            // pause puzzle timer\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.pause();\r\n            // show the pause-puzzle-modal\r\n            await $('#pause-puzzle-modal').get(0).show();\r\n        },\r\n\r\n        /**\r\n         * resumes the puzzle level. Resumes the puzzle timer and\r\n         * hides the pause-puzzle modal\r\n         *\r\n         * @returns {Promise<void>}\r\n         */\r\n        async resumePuzzleLevel(){\r\n\r\n            // flag that the puzzle has not been completed\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                puzzleCompleted = false;\r\n            // hide the pause-puzzle-modal\r\n            await $('#pause-puzzle-modal').get(0).hide();\r\n            // resume puzzle timer\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.start();\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for when the puzzle menu is opened\r\n         * @returns {Promise<void>}\r\n         */\r\n        async puzzleMenuOpenedListener(){\r\n            // flag that puzzle has NOT been completed\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                puzzleCompleted = false;\r\n            // pause puzzle timer\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.pause();\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for when the puzzle menu is opened\r\n         * @returns {Promise<void>}\r\n         */\r\n        async puzzleMenuClosedListener(){\r\n            // resume puzzle timer\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.start();\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for when the app notifies that it wants to exit\r\n         * @param eventArgs\r\n         * @returns {Promise<void>}\r\n         */\r\n        async appWillExitListener(eventArgs){\r\n            var event = eventArgs[0]; // get the event object from eventArgs array\r\n            // check if event has been canceled\r\n            if(event.isCanceled !== true){ // event has not been canceled\r\n                // check if puzzle has been completed\r\n                if(utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                    puzzleCompleted !== true){ // puzzle level has not been completed\r\n\r\n                    // since user has not completed the puzzle, try to prevent app exit using a warning\r\n                    event.cancel = true;\r\n                    // attach the warning message for preventing exit\r\n                    event.warningMessage = \"All progress on this puzzle will be lost if you exit now.\"\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * method is listener for when the APP WILL NO LONGER BE EXITED\r\n         * @returns {Promise<void>}\r\n         */\r\n        async appNoExitListener(){\r\n            // do nothing for now\r\n        },\r\n\r\n        /**\r\n         * method id used to listen for when the background music switch on the puzzle menu is clicked\r\n         * @param eventArgs\r\n         * @returns {Promise<void>}\r\n         */\r\n        async backgroundMusicSwitchClickedListener(eventArgs){\r\n\r\n            var event = eventArgs[0]; // get the event object from eventArgs array\r\n\r\n            // check if background sound is being turned on or off\r\n            if(event.switchOn === true){ // background music is being turned on\r\n                // add puzzle background tune\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.preloadComplex('puzzle-background', 'audio/puzzle-level-background.mp3',\r\n                        1, 1, 0, resolve, resolve);\r\n                });\r\n\r\n                // start playing background tune in a loop\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.loop('puzzle-background', resolve, resolve);\r\n                });\r\n            }\r\n            else{ // background music is being turned off\r\n                // stop playing the background music\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.stop('puzzle-background', resolve, resolve);\r\n                });\r\n                // unload the background music\r\n                await new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.unload('puzzle-background', resolve, resolve);\r\n                });\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n};\r\n\r\n\r\n"]}