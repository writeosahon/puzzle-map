{"version":3,"sources":["controller.js"],"names":[],"mappings":"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","file":"controller-compiled.js","sourcesContent":["/**\r\n * Created by UTOPIA SOFTWARE on 26/7/2018.\r\n */\r\n\r\n/**\r\n * file defines all View-Models, Controllers and Event Listeners used by the app\r\n *\r\n * The 'utopiasoftware_app_namespace' namespace variable has being defined in the base js file.\r\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\r\n * also used interchangeably\r\n */\r\n\r\n// define the controller namespace\r\nutopiasoftware[utopiasoftware_app_namespace].controller = {\r\n\r\n\r\n    /**\r\n     * method contains the stratup/bootstrap code needed to initiate app logic execution\r\n     */\r\n    startup: function(){\r\n\r\n        // initialise the app libraries and plugins\r\n        ons.ready(async function () {\r\n            // set the default handler for the app\r\n            ons.setDefaultDeviceBackButtonListener(function(){\r\n                // does nothing for now!!\r\n            });\r\n\r\n            // create the view-reports-additional menu popover\r\n            // await ons.createPopover(\"view-reports-additional-menu-popover-template\");\r\n\r\n            // displaying prepping message\r\n            $('#loader-modal-message').html(\"Loading Puzzle...\");\r\n            $('#loader-modal').get(0).show(); // show loader\r\n\r\n            if(true){ // there is a previous logged in user\r\n                // load the app main page\r\n                $('ons-splitter').get(0).content.load(\"app-main-template\");\r\n            }\r\n            else{ // there is no previously logged in user\r\n                // load the login page\r\n                $('ons-splitter').get(0).content.load(\"login-template\");\r\n            }\r\n\r\n            // START ALL CORDOVA PLUGINS CONFIGURATIONS\r\n            try{\r\n                // lock the orientation of the device to 'PORTRAIT'\r\n                screen.orientation.lock('portrait');\r\n            }\r\n            catch(err){}\r\n\r\n            try{\r\n                await new Promise(function(resolve, reject){\r\n                    // Hide system UI and keep it hidden\r\n                    AndroidFullScreen.immersiveMode(resolve, reject);\r\n                });\r\n            }\r\n            catch(err){}\r\n\r\n            try { // START ALL THE CORDOVA PLUGINS CONFIGURATION WHICH REQUIRE PROMISE SYNTAX\r\n            }\r\n            catch(err){\r\n                console.log(\"APP LOADING ERROR\", err);\r\n            }\r\n            finally{\r\n                 // set status bar color\r\n                 StatusBar.backgroundColorByHexString(\"#363E7C\");\r\n                 navigator.splashscreen.hide(); // hide the splashscreen\r\n                 utopiasoftware[utopiasoftware_app_namespace].model.isAppReady = true; // flag that app is fully loaded and ready\r\n            }\r\n\r\n        }); // end of ons.ready()\r\n\r\n    },\r\n\r\n\r\n    /**\r\n     * this is the view-model/controller for the Sample Puzzle page\r\n     */\r\n    samplePuzzlePageViewModel: {\r\n\r\n        draggableDroppableObject: null,\r\n        dragStartSource: null,\r\n        jqueryDropZone: null,\r\n        dragStartContainer: null,\r\n        moveCounter: 0,\r\n        puzzleTimer: null,\r\n        puzzleAnswerSheetMap: null,\r\n\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            async function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware[utopiasoftware_app_namespace].model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#app-main-navigator').get(0).topPage.onDeviceBackButton =\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.backButtonClicked;\r\n\r\n                // create the Draggable.Droppable object\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.draggableDroppableObject =\r\n                new Draggable.Droppable([...$('#sample-puzzle-page .puzzle-pieces-container').get()],\r\n                    {\r\n                        draggable: 'img.puzzle-pieces',\r\n                        scrollable: {\r\n                            sensitivity: 30,\r\n                            scrollableElements: [...$('#sample-puzzle-page .puzzle-pieces-carousel').get()]\r\n                        },\r\n                        mirror: {\r\n                            constrainDimensions: false,\r\n                            appendTo: 'body'\r\n                        },\r\n                        dropzone: $('#sample-puzzle-page .puzzle-drop-zone').get()\r\n                }).\r\n                removePlugin(Draggable.Plugins.Focusable).\r\n                on(\"drag:start\", function(dragStartEvent){\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        samplePuzzlePageViewModel.dragStartSource = $(dragStartEvent.source);\r\n                }).\r\n                on(\"droppable:start\", function(droppableStartEvent){\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        samplePuzzlePageViewModel.dragStartContainer = $(droppableStartEvent.dropzone);\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        samplePuzzlePageViewModel.dragStartContainer.puzzleStartDropStamp = Date.now();\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        samplePuzzlePageViewModel.dragStartContainer.puzzleDropped = false;\r\n\r\n                    if(! utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        samplePuzzlePageViewModel.dragStartContainer.is('.puzzle-pieces-tray')){\r\n                        let puzzleSlotValue = utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            samplePuzzlePageViewModel.dragStartContainer.attr('data-puzzle-slot');\r\n                        // remove all animation from the container\r\n                        $(`.puzzle-drop-zone[data-puzzle-slot=\"${puzzleSlotValue}\"]`, $thisPage).\r\n                        removeClass(\"animated shake pulse\");\r\n                    }\r\n                }).\r\n                on(\"droppable:dropped\", function(droppableDroppedEvent){\r\n                    console.log(\"DROP ZONE\", droppableDroppedEvent.dropzone);\r\n\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        samplePuzzlePageViewModel.jqueryDropZone = $(droppableDroppedEvent.dropzone);\r\n                    let puzzleSlotValue = null;\r\n\r\n                    if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    samplePuzzlePageViewModel.jqueryDropZone.is('.puzzle-pieces-tray')){\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            samplePuzzlePageViewModel.jqueryDropZone.isPuzzlePieceTray = true;\r\n\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            samplePuzzlePageViewModel.dragStartContainer.puzzleDropped = false;\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            samplePuzzlePageViewModel.dragStartContainer.puzzleDroppedStamp = 0;\r\n                    }\r\n                    else{\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            samplePuzzlePageViewModel.jqueryDropZone.isPuzzlePieceTray = false; // set puzzle tray to false\r\n\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            samplePuzzlePageViewModel.dragStartContainer.puzzleDropped = true;\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            samplePuzzlePageViewModel.dragStartContainer.puzzleDroppedStamp =\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                samplePuzzlePageViewModel.dragStartContainer.puzzleStartDropStamp;\r\n                    }\r\n                }).\r\n                on(\"droppable:stop\", function(droppableStopEvent){\r\n\r\n                    if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        samplePuzzlePageViewModel.dragStartContainer.puzzleDropped === true &&\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            samplePuzzlePageViewModel.dragStartContainer.puzzleStartDropStamp ===\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            samplePuzzlePageViewModel.dragStartContainer.puzzleDroppedStamp){\r\n\r\n                        let puzzleSlotValue = $(droppableStopEvent.dropzone).attr('data-puzzle-slot');\r\n\r\n\r\n                        if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        samplePuzzlePageViewModel.dragStartSource.attr('data-puzzle-slot') == puzzleSlotValue){\r\n                            // add positive animation to container\r\n                            $(`.puzzle-drop-zone[data-puzzle-slot=\"${puzzleSlotValue}\"]`, $thisPage).\r\n                            addClass(\"animated pulse\");\r\n\r\n                            // update the puzzleAnswerSheet map object to indicate this answer was correct\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleAnswerSheetMap.\r\n                                set(puzzleSlotValue, true);\r\n\r\n                            // call the method to check the users answer sheet\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.checkAnswerSheet();\r\n                        }\r\n                        else{\r\n                            // add negative animation to container\r\n                            $(`.puzzle-drop-zone[data-puzzle-slot=\"${puzzleSlotValue}\"]`, $thisPage).\r\n                            addClass(\"animated shake\");\r\n\r\n                            // update the puzzleAnswerSheet map object to indicate this answer was wrong\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleAnswerSheetMap.\r\n                            set(puzzleSlotValue, false);\r\n                        }\r\n                    }\r\n\r\n                    /*if(! $(droppableStopEvent.dropzone).is('.puzzle-pieces-tray')){\r\n                        let puzzleSlotValue = $(droppableStopEvent.dropzone).attr('data-puzzle-slot');\r\n\r\n\r\n                        if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            samplePuzzlePageViewModel.dragStartSource.attr('data-puzzle-slot') == puzzleSlotValue){\r\n                            // add positive animation to container\r\n                            $(`.puzzle-drop-zone[data-puzzle-slot=\"${puzzleSlotValue}\"]`, $thisPage).\r\n                            addClass(\"animated pulse\");\r\n                        }\r\n                    }*/\r\n                }).\r\n                on(\"droppable:dropped\", function(droppableDroppedEvent){\r\n                    console.log(\"DROP ZONE\", droppableDroppedEvent.dropzone);\r\n\r\n                    // increase the move counter value by 1\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.moveCounter += 1;\r\n                    // display the new value of the move counter to the user\r\n                    $('#sample-puzzle-page .puzzle-moves-counter').\r\n                    html(utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.moveCounter);\r\n                });\r\n\r\n                // instantiate the puzzleAnswerSheet js Map\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleAnswerSheetMap =\r\n                    new Map();\r\n                for(let index = 0; index < 3; index++){\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleAnswerSheetMap.\r\n                        set((\"\" + (index + 1)), false);\r\n                }\r\n\r\n                // create the Puzzle Timer object\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleTimer = new Timer();\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleTimer.\r\n                start({startValues: {secondTenths: 0, seconds: 0, minutes: 0, hours: 0, days: 0},\r\n                    precision: 'secondTenths'});\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleTimer.pause();\r\n\r\n                // add event listener for when timer value is updated\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleTimer.\r\n                    addEventListener(\"secondTenthsUpdated\", function(timer){\r\n                        $('#sample-puzzle-page .puzzle-timer-counter').\r\n                        html(utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleTimer.\r\n                        getTimeValues().toString(['hours', 'minutes', 'seconds', 'secondTenths']));\r\n                });\r\n\r\n                // add event listener for when timer value is stopped\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleTimer.\r\n                addEventListener(\"stopped\", function(timer){\r\n                    // update the contents of the level completed modal\r\n                    $('#puzzle-level-complete-modal .level-time').html(\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleTimer.\r\n                        getTimeValues().toString(['hours', 'minutes', 'seconds', 'secondTenths'])\r\n                    );\r\n                    $('#puzzle-level-complete-modal .level-moves').html(\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.moveCounter\r\n                    );\r\n\r\n                    // show the level completed modal\r\n                    $('#puzzle-level-complete-modal').get(0).show();\r\n                });\r\n\r\n\r\n                // pause the puzzle level in order to begin. level starts when user hits \"Continue\" button\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.pausePuzzleLevel();\r\n                $('#loader-modal').get(0).hide(); // hide loader\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            //window.SoftInputMode.set('adjustPan'); // let the window/view-port 'pan' when the soft keyboard is displayed\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: function(){\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            // window.SoftInputMode.set('adjustResize'); // let the view 'resize' when the soft keyboard is displayed\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is destroyed\r\n         */\r\n        pageDestroy: function(){\r\n\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when the device back button is clicked OR a similar action is triggered\r\n         */\r\n        async backButtonClicked(){\r\n\r\n            // check if the side menu is open\r\n            if($('ons-splitter').get(0).right.isOpen){ // side menu open, so close it\r\n                $('ons-splitter').get(0).right.close();\r\n                return; // exit the method\r\n            }\r\n\r\n            // pause puzzle timer\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleTimer.pause();\r\n\r\n            ons.notification.confirm('Do you want to close the app?', {title: 'Exit App',\r\n                buttonLabels: ['No', 'Yes'], modifier: 'utopiasoftware-alert-dialog'}) // Ask for confirmation\r\n                .then(function(index) {\r\n                    if (index === 1) { // OK button\r\n                        navigator.app.exitApp(); // Close the app\r\n                    }\r\n                    else{\r\n                        // resume the puzzle timer\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleTimer.start();\r\n                    }\r\n                });\r\n        },\r\n\r\n        /**\r\n         * method is used to check the status of the users puzzle answer sheet.\r\n         * if all puzzle pieces have been place correctly, then the level is completed\r\n         * @returns {Promise<void>}\r\n         */\r\n        async checkAnswerSheet(){\r\n\r\n            // update the puzzleAnswerSheet map object to indicate this answer was correct\r\n            for(let entry of utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.\r\n                puzzleAnswerSheetMap){\r\n                if(entry[1] === false){ // an answer is still wrong\r\n                    return;\r\n                }\r\n            }\r\n            // stop the entire to indicate that puzzle has completed\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleTimer.stop();\r\n            return;\r\n        },\r\n\r\n\r\n        async pausePuzzleLevel(){\r\n\r\n            // pause puzzle timer\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleTimer.pause();\r\n            // show the pause-puzzle-modal\r\n            await $('#pause-puzzle-modal').get(0).show();\r\n        },\r\n\r\n        async resumePuzzleLevel(){\r\n\r\n            // hide the pause-puzzle-modal\r\n            await $('#pause-puzzle-modal').get(0).hide();\r\n            // resume puzzle timer\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.samplePuzzlePageViewModel.puzzleTimer.start();\r\n        }\r\n\r\n    }\r\n\r\n};\r\n\r\n\r\n"]}