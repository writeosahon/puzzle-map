{"version":3,"sources":["controller.js"],"names":[],"mappings":"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","file":"controller-compiled.js","sourcesContent":["/**\r\n * Created by UTOPIA SOFTWARE on 26/7/2018.\r\n */\r\n\r\n/**\r\n * file defines all View-Models, Controllers and Event Listeners used by the app\r\n *\r\n * The 'utopiasoftware_app_namespace' namespace variable has being defined in the base js file.\r\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\r\n * also used interchangeably\r\n */\r\n\r\n// define the controller namespace\r\nutopiasoftware[utopiasoftware_app_namespace].controller = {\r\n\r\n\r\n    /**\r\n     * method contains the stratup/bootstrap code needed to initiate app logic execution\r\n     */\r\n    startup: function(){\r\n\r\n        // initialise the app libraries and plugins\r\n        ons.ready(async function () {\r\n            // set the default handler for the app\r\n            ons.setDefaultDeviceBackButtonListener(function(){\r\n                // does nothing for now!!\r\n            });\r\n\r\n            // create the view-reports-additional menu popover\r\n            // await ons.createPopover(\"view-reports-additional-menu-popover-template\");\r\n\r\n            // displaying prepping message\r\n            $('#loader-modal-message').html(\"Loading Puzzle...\");\r\n            $('#loader-modal').get(0).show(); // show loader\r\n\r\n            if(true){ // there is a previous logged in user\r\n                // load the app main page\r\n                $('ons-splitter').get(0).content.load(\"app-main-template\");\r\n            }\r\n            else{ // there is no previously logged in user\r\n                // load the login page\r\n                $('ons-splitter').get(0).content.load(\"login-template\");\r\n            }\r\n\r\n            // START ALL CORDOVA PLUGINS CONFIGURATIONS\r\n            try{\r\n                // lock the orientation of the device to 'PORTRAIT'\r\n                screen.orientation.lock('portrait');\r\n            }\r\n            catch(err){}\r\n\r\n            try{\r\n                await new Promise(function(resolve, reject){\r\n                    // Hide system UI and keep it hidden\r\n                    AndroidFullScreen.immersiveMode(resolve, reject);\r\n                });\r\n            }\r\n            catch(err){}\r\n\r\n            try { // START ALL THE CORDOVA PLUGINS CONFIGURATION WHICH REQUIRE PROMISE SYNTAX\r\n            }\r\n            catch(err){\r\n                console.log(\"APP LOADING ERROR\", err);\r\n            }\r\n            finally{\r\n                 // set status bar color\r\n                 StatusBar.backgroundColorByHexString(\"#363E7C\");\r\n                 navigator.splashscreen.hide(); // hide the splashscreen\r\n                 utopiasoftware[utopiasoftware_app_namespace].model.isAppReady = true; // flag that app is fully loaded and ready\r\n            }\r\n\r\n        }); // end of ons.ready()\r\n\r\n    },\r\n\r\n\r\n    /**\r\n     * this is the view-model/controller for the Puzzle Levels page\r\n     */\r\n    puzzleLevelsPageViewModel: {\r\n\r\n        /**\r\n         * property is an object that holds configuration set up for the app\r\n         */\r\n        gameConfigObject: null,\r\n\r\n        /**\r\n         * property flags if the audio effects and sounds are ready to be\r\n         */\r\n        isAudioReady: false,\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            async function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware[utopiasoftware_app_namespace].model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#app-main-navigator').get(0).topPage.onDeviceBackButton =\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzleLevelsPageViewModel.backButtonClicked;\r\n\r\n                // get the app game config from the stored json data\r\n                let serverResponse = await Promise.resolve($.ajax(\r\n                    {\r\n                        url: \"game-config.json\",\r\n                        type: \"get\",\r\n                        contentType: false,\r\n                        dataType: \"text\",\r\n                        timeout: 240000, // wait for 4 minutes before timeout of request\r\n                        processData: false\r\n                    }\r\n                ));\r\n\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzleLevelsPageViewModel.gameConfigObject =\r\n                    JSON.parse(serverResponse); // convert the response to JSON object\r\n\r\n                let puzzleLevelContent = \"\"; // holds the contents to for the levels\r\n\r\n                // create the puzzle levels board/content\r\n                for(let index = 1; index <= utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    puzzleLevelsPageViewModel.gameConfigObject[\"config\"][\"total_levels\"]; index++){\r\n                    puzzleLevelContent +=\r\n                        `<div class=\"col-xs-1\" style=\"margin-top: 1em;\"></div>\r\n                            <div class=\"col-xs-3\" style=\"margin-top: 1em;\"\r\n                            onclick=\"utopiasoftware[utopiasoftware_app_namespace].controller.puzzleLevelsPageViewModel.\r\n                            loadPuzzleLevel(${index})\">\r\n                            <ons-ripple></ons-ripple>\r\n                            <img src=\"game-puzzle/level-${index}-puzzle-completed.png\" style=\"width: 90%; height: auto;\">\r\n                            <span style=\"display: block; width: 100%; text-align: justify; font-size: 0.9em; color: #F4C724;\r\n                            text-shadow: -1px -1px 2px #000000;\">\r\n                            LEVEL 1\r\n                            </span>\r\n                        </div>`;\r\n                }\r\n\r\n                $('#puzzle-levels-page #puzzle-levels-container').html(puzzleLevelContent); // append the content to the page\r\n\r\n                // add background tune\r\n                try{\r\n\r\n                    await new Promise(function(resolve, reject){\r\n                        window.plugins.NativeAudio.preloadComplex('puzzle-levels-background', 'audio/puzzles-select-level-background.mp3',\r\n                            1, 1, 0, resolve, reject);\r\n                    });\r\n                }\r\n                catch(err){}\r\n\r\n                // start playing background tune in a loop\r\n                try{\r\n                    await new Promise(function(resolve, reject){\r\n                        window.plugins.NativeAudio.loop('puzzle-levels-background', resolve, reject);\r\n                    });\r\n                }\r\n                catch(err){}\r\n\r\n\r\n                await $('#loader-modal').get(0).hide(); // hide loader\r\n\r\n                // set that audio use is ready\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                    puzzleLevelsPageViewModel.isAudioReady = true;\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            //window.SoftInputMode.set('adjustPan'); // let the window/view-port 'pan' when the soft keyboard is displayed\r\n\r\n            // check that audio is ready\r\n            if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                puzzleLevelsPageViewModel.isAudioReady === true){\r\n                // play audio\r\n                new Promise(function(resolve, reject){\r\n                    window.plugins.NativeAudio.loop('puzzle-levels-background', resolve, resolve);\r\n                });\r\n            }\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: function(){\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            // window.SoftInputMode.set('adjustResize'); // let the view 'resize' when the soft keyboard is displayed\r\n\r\n            // stop playing the background music\r\n            new Promise(function(resolve, reject){\r\n                window.plugins.NativeAudio.stop('puzzle-levels-background', resolve, resolve);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is destroyed\r\n         */\r\n        pageDestroy: function(){\r\n\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when the device back button is clicked OR a similar action is triggered\r\n         */\r\n        async backButtonClicked(){\r\n\r\n            // toggle the side-menu i.e. the puzzle menu\r\n            await $('#side-menu').get(0).toggle();\r\n        },\r\n\r\n        /**\r\n         * method is used to load the puzzle level details\r\n         */\r\n        async loadPuzzleLevel(levelNumber){\r\n            // displaying prepping message\r\n            $('#loader-modal-message').html(\"Loading Puzzle Level...\");\r\n            await $('#loader-modal').get(0).show(); // show loader\r\n\r\n            // stop playing the background music\r\n            await new Promise(function(resolve, reject){\r\n                window.plugins.NativeAudio.stop('puzzle-levels-background', resolve, resolve);\r\n            });\r\n\r\n            // load the puzzle level page with the required page data\r\n            await $('#app-main-navigator').get(0).pushPage(\"puzzle-page.html\", {\r\n                data: {puzzleData: {levelNumber: levelNumber}}});\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * this is the view-model/controller for the Puzzle page\r\n     */\r\n    puzzlePageViewModel: {\r\n\r\n        draggableDroppableObject: null,\r\n        dragStartSource: null,\r\n        jqueryDropZone: null,\r\n        dragStartContainer: null,\r\n        moveCounter: 0,\r\n        puzzleTimer: null,\r\n        puzzleAnswerSheetMap: null,\r\n        puzzleCompleted: false,\r\n\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            async function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware[utopiasoftware_app_namespace].model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#app-main-navigator').get(0).topPage.onDeviceBackButton =\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.backButtonClicked;\r\n\r\n                // add puzzle level background tune\r\n                try{\r\n\r\n                    await new Promise(function(resolve, reject){\r\n                        window.plugins.NativeAudio.preloadComplex('puzzle-background', 'audio/puzzle-level-background.mp3',\r\n                            1, 1, 0, resolve, reject);\r\n                    });\r\n                }\r\n                catch(err){}\r\n\r\n                // start playing background tune in a loop\r\n                try{\r\n                    await new Promise(function(resolve, reject){\r\n                        window.plugins.NativeAudio.loop('puzzle-background', resolve, reject);\r\n                    });\r\n                }\r\n                catch(err){}\r\n\r\n                // create the Draggable.Droppable object\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.draggableDroppableObject =\r\n                    new Draggable.Droppable([...$('#puzzle-page .puzzle-pieces-container').get()],\r\n                        {\r\n                            draggable: 'img.puzzle-pieces',\r\n                            scrollable: {\r\n                                sensitivity: 30,\r\n                                scrollableElements: [...$('#puzzle-page .puzzle-pieces-carousel').get()]\r\n                            },\r\n                            mirror: {\r\n                                constrainDimensions: false,\r\n                                appendTo: 'body'\r\n                            },\r\n                            dropzone: $('#puzzle-page .puzzle-drop-zone').get()\r\n                        }).\r\n                    removePlugin(Draggable.Plugins.Focusable).\r\n                    on(\"drag:start\", function(dragStartEvent){\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartSource = $(dragStartEvent.source);\r\n                    }).\r\n                    on(\"droppable:start\", function(droppableStartEvent){\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartContainer = $(droppableStartEvent.dropzone);\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartContainer.puzzleStartDropStamp = Date.now();\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartContainer.puzzleDropped = false;\r\n\r\n                        if(! utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        puzzlePageViewModel.dragStartContainer.is('.puzzle-pieces-tray')){\r\n                            let puzzleSlotValue = utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartContainer.attr('data-puzzle-slot');\r\n                            // remove all animation from the container\r\n                            $(`.puzzle-drop-zone[data-puzzle-slot=\"${puzzleSlotValue}\"]`, $thisPage).\r\n                            removeClass(\"animated shake pulse\");\r\n                        }\r\n                    }).\r\n                    on(\"droppable:dropped\", function(droppableDroppedEvent){\r\n                        console.log(\"DROP ZONE\", droppableDroppedEvent.dropzone);\r\n\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.jqueryDropZone = $(droppableDroppedEvent.dropzone);\r\n                        let puzzleSlotValue = null;\r\n\r\n                        if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                        puzzlePageViewModel.jqueryDropZone.is('.puzzle-pieces-tray')){\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.jqueryDropZone.isPuzzlePieceTray = true;\r\n\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleDropped = false;\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleDroppedStamp = 0;\r\n                        }\r\n                        else{\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.jqueryDropZone.isPuzzlePieceTray = false; // set puzzle tray to false\r\n\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleDropped = true;\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleDroppedStamp =\r\n                                utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                    puzzlePageViewModel.dragStartContainer.puzzleStartDropStamp;\r\n                        }\r\n                    }).\r\n                    on(\"droppable:stop\", function(droppableStopEvent){\r\n\r\n                        if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleDropped === true &&\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleStartDropStamp ===\r\n                            utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                puzzlePageViewModel.dragStartContainer.puzzleDroppedStamp){\r\n\r\n                            let puzzleSlotValue = $(droppableStopEvent.dropzone).attr('data-puzzle-slot');\r\n\r\n\r\n                            if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                            puzzlePageViewModel.dragStartSource.attr('data-puzzle-slot') == puzzleSlotValue){\r\n                                // add positive animation to container\r\n                                $(`.puzzle-drop-zone[data-puzzle-slot=\"${puzzleSlotValue}\"]`, $thisPage).\r\n                                addClass(\"animated pulse\");\r\n\r\n                                // update the puzzleAnswerSheet map object to indicate this answer was correct\r\n                                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleAnswerSheetMap.\r\n                                set(puzzleSlotValue, true);\r\n\r\n                                // call the method to check the users answer sheet\r\n                                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.checkAnswerSheet();\r\n                            }\r\n                            else{\r\n                                // add negative animation to container\r\n                                $(`.puzzle-drop-zone[data-puzzle-slot=\"${puzzleSlotValue}\"]`, $thisPage).\r\n                                addClass(\"animated shake\");\r\n\r\n                                // update the puzzleAnswerSheet map object to indicate this answer was wrong\r\n                                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleAnswerSheetMap.\r\n                                set(puzzleSlotValue, false);\r\n                            }\r\n                        }\r\n\r\n                        /*if(! $(droppableStopEvent.dropzone).is('.puzzle-pieces-tray')){\r\n                            let puzzleSlotValue = $(droppableStopEvent.dropzone).attr('data-puzzle-slot');\r\n\r\n\r\n                            if(utopiasoftware[utopiasoftware_app_namespace].controller.\r\n                                samplePuzzlePageViewModel.dragStartSource.attr('data-puzzle-slot') == puzzleSlotValue){\r\n                                // add positive animation to container\r\n                                $(`.puzzle-drop-zone[data-puzzle-slot=\"${puzzleSlotValue}\"]`, $thisPage).\r\n                                addClass(\"animated pulse\");\r\n                            }\r\n                        }*/\r\n                    }).\r\n                    on(\"droppable:dropped\", function(droppableDroppedEvent){\r\n                        console.log(\"DROP ZONE\", droppableDroppedEvent.dropzone);\r\n\r\n                        // increase the move counter value by 1\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.moveCounter += 1;\r\n                        // display the new value of the move counter to the user\r\n                        $('#puzzle-page .puzzle-moves-counter').\r\n                        html(utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.moveCounter);\r\n                    });\r\n\r\n                // instantiate the puzzleAnswerSheet js Map\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleAnswerSheetMap =\r\n                    new Map();\r\n                for(let index = 0; index < 3; index++){\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleAnswerSheetMap.\r\n                    set((\"\" + (index + 1)), false);\r\n                }\r\n\r\n                // create the Puzzle Timer object\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer = new Timer();\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.\r\n                start({startValues: {secondTenths: 0, seconds: 0, minutes: 0, hours: 0, days: 0},\r\n                    precision: 'secondTenths'});\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.pause();\r\n\r\n                // add event listener for when timer value is updated\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.\r\n                addEventListener(\"secondTenthsUpdated\", function(timer){\r\n                    $('#puzzle-page .puzzle-timer-counter').\r\n                    html(utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.\r\n                    getTimeValues().toString(['hours', 'minutes', 'seconds', 'secondTenths']));\r\n                });\r\n\r\n                // add event listener for when timer value is stopped\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.\r\n                addEventListener(\"paused\", function(timer){\r\n\r\n                    // check if puzzle has been completed\r\n                    if(utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                        puzzleCompleted !== true){ // puzzle has not been completed, so exit method\r\n                        return;\r\n                    }\r\n                    // update the contents of the level completed modal\r\n                    $('#puzzle-level-complete-modal .level-time').html(\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.\r\n                        getTimeValues().toString(['hours', 'minutes', 'seconds', 'secondTenths'])\r\n                    );\r\n                    $('#puzzle-level-complete-modal .level-moves').html(\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.moveCounter\r\n                    );\r\n\r\n                    // show the level completed modal\r\n                    $('#puzzle-level-complete-modal').get(0).show();\r\n                });\r\n\r\n\r\n                // pause the puzzle level in order to begin. level starts when user hits \"Continue\" button\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.pausePuzzleLevel();\r\n                $('#loader-modal').get(0).hide(); // hide loader\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            //window.SoftInputMode.set('adjustPan'); // let the window/view-port 'pan' when the soft keyboard is displayed\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: function(){\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            // window.SoftInputMode.set('adjustResize'); // let the view 'resize' when the soft keyboard is displayed\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is destroyed\r\n         */\r\n        pageDestroy: function(){\r\n\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when the device back button is clicked OR a similar action is triggered\r\n         */\r\n        async backButtonClicked(){\r\n\r\n            // check if the side menu is open\r\n            if($('ons-splitter').get(0).right.isOpen){ // side menu open, so close it\r\n                $('ons-splitter').get(0).right.close();\r\n                return; // exit the method\r\n            }\r\n\r\n            // todo REMOVE THIS NEXT LINE LATER flag that puzzle has NOT been completed\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                puzzleCompleted = false;\r\n            // pause puzzle timer\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.pause();\r\n\r\n            ons.notification.confirm('Do you want to close the app?', {title: 'Exit App',\r\n                buttonLabels: ['No', 'Yes'], modifier: 'utopiasoftware-alert-dialog'}) // Ask for confirmation\r\n                .then(function(index) {\r\n                    if (index === 1) { // OK button\r\n                        navigator.app.exitApp(); // Close the app\r\n                    }\r\n                    else{\r\n                        // resume the puzzle timer\r\n                        utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.start();\r\n                    }\r\n                });\r\n        },\r\n\r\n        /**\r\n         * method is used to check the status of the users puzzle answer sheet.\r\n         * if all puzzle pieces have been place correctly, then the level is completed\r\n         * @returns {Promise<void>}\r\n         */\r\n        async checkAnswerSheet(){\r\n\r\n            // update the puzzleAnswerSheet map object to indicate this answer was correct\r\n            for(let entry of utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                puzzleAnswerSheetMap){\r\n                if(entry[1] === false){ // an answer is still wrong\r\n                    // flag that puzzle has NOT been completed\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                        puzzleCompleted = false;\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // flag that puzzle has been completed\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.\r\n                puzzleCompleted = true;\r\n            // stop the entire to indicate that puzzle has completed\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.pause();\r\n            return;\r\n        },\r\n\r\n\r\n        async pausePuzzleLevel(){\r\n\r\n            // pause puzzle timer\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.pause();\r\n            // show the pause-puzzle-modal\r\n            await $('#pause-puzzle-modal').get(0).show();\r\n        },\r\n\r\n        async resumePuzzleLevel(){\r\n\r\n            // hide the pause-puzzle-modal\r\n            await $('#pause-puzzle-modal').get(0).hide();\r\n            // resume puzzle timer\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.puzzlePageViewModel.puzzleTimer.start();\r\n        }\r\n\r\n    },\r\n\r\n};\r\n\r\n\r\n"]}