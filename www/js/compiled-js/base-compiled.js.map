{"version":3,"sources":["base.js"],"names":[],"mappings":"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","file":"base-compiled.js","sourcesContent":["/**\n * Created by UTOPIA SOFTWARE on 5/10/2018.\n */\n\n/**\n * file provides the \"base\" framework/utilities required to launch the app.\n * E.g. - File creates the base namespace which the app is built on.\n * - Loads all the ES moddule libraries required etc\n *\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\n * also used interchangeably\n **/\n\n\n// constant that defines the app namespace\nconst utopiasoftware_app_namespace = 'puzzle';\n\n/**\n * create the namespace and base methods and properties for the app\n * @type {{}}\n */\nconst utopiasoftware = {\n    [utopiasoftware_app_namespace]: {\n\n        /**\n         * holds the randomisation engine used by Random.Js\n         */\n        randomisationEngine: Random.engines.browserCrypto,\n\n        /**\n         * object is responsible for handling operations on the \"game settings\" data\n         */\n        gameSettingsOperations: {\n\n            /**\n             * method loads the game settings data from the app database\n             * @returns {Promise<void>}\n             */\n            async loadGameSettingsData(){\n\n                try{\n                    // get the game settings data\n                    return await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.get(\"gameSettings\");\n                }\n                finally{\n                }\n            },\n\n\n            /**\n             * method is used to save the game settings data to the app database\n             * @param gameSettings\n             * @returns {Promise<void>}\n             */\n            async saveGameSettingsData(gameSettings){\n\n                try{\n                    try{\n                        // get the last _rev property that was used to save the game settings data\n                        gameSettings._rev =\n                            (await utopiasoftware[utopiasoftware_app_namespace].gameSettingsOperations.loadGameSettingsData())._rev;\n                    }\n                    catch(err){}\n\n                    // return the game settings data\n                    return await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.put(gameSettings);\n                }\n                finally{\n                }\n            }\n        },\n\n        /**\n         * object is responsible for handling operations on the userGameData, including\n         * backing up and restoring user game data across devices\n         */\n        userGameDataOperations: {\n\n            /**\n             * method is used to check whether or not the app has a backup or not.\n             * It resolves to true if there is a backup and false otherwise\n             *\n             * @returns {Promise<*>}\n             */\n            async backupExists(){\n                // check if backup exists\n                return new Promise(function(resolve, reject){\n                    cordova.plugin.cloudsettings.exists(function(exists){\n                        resolve(exists); // resolve the promise with the status of whether backup exist or not\n                    });\n                });\n            },\n\n            /**\n             * method is used to load the backed-up user game data.\n             * USER MUST CHECK IF A BACKUP EXISTS BEFORE CALLING THIS METHOD.\n             *\n             * As part of the load process, the loaded data is also automatically saved to\n             * the user's app local database\n             *\n             * @returns {Promise<any>}\n             */\n            async loadBackupData(){\n\n                // get the backed-up data\n                let loadedData = await new Promise(function(resolve, reject){\n\n                    cordova.plugin.cloudsettings.load(resolve, reject);\n                });\n                console.log(\"LOADED BACKUP\", loadedData);\n\n                // save the loaded data in the device's local database\n                try{\n                    // get the _rev property of the last saved (on local database) user game data\n                    var {_rev} = await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.get(\"userGameData\");\n                }\n                catch(err){}\n\n                try{\n                    await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.\n                    put(Object.assign({_id: \"userGameData\", doctype: \"USER GAME DATA\", _rev}, loadedData));\n                }\n                catch(err){console.log(\"SAVED USER GAME DATA TO LOCAL DATABASE 1\")}\n\n                return loadedData;\n            },\n\n            /**\n             * method is used to save the user game data to the backup service\n             *\n             * As part of the load process, the user game data is also automatically saved to the\n             * user's app local database\n             *\n             * @param gameData\n             *\n             * @returns {Promise<any>}\n             */\n            async saveBackupData(gameData){\n\n                // save the game data\n                let savedData = await new Promise(function(resolve, reject){\n\n                    cordova.plugin.cloudsettings.save(gameData, resolve, reject, true);\n                });\n\n                console.log(\"SAVED BACKUP\", savedData);\n                // save the loaded data in the device's local database\n                try{\n                    // get the _rev property of the last saved (on local database) user game data\n                    var {_rev} = await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.get(\"userGameData\");\n                }\n                catch(err){}\n\n                try{\n                    await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.\n                    put(Object.assign({_id: \"userGameData\", doctype: \"USER GAME DATA\", _rev}, savedData));\n                }\n                catch(err){console.log(\"SAVED USER GAME DATA TO LOCAL DATABASE 2\")}\n\n                return savedData;\n            },\n\n            /**\n             * method is used to sync the local backed-up data with the backup data restored from\n             * the cloud while the user is using the app\n             *\n             * @returns {Promise<void>}\n             */\n            async onRestoreHandler(){\n                console.log(\"BACKUP RESTORE CALLED\");\n                try{\n                    // load the backed-up data\n                    let loadedData = await new Promise(function(resolve, reject){\n\n                        cordova.plugin.cloudsettings.load(resolve, reject);\n                    });\n\n                    // get the cached user game data\n                    try{\n                        // get the last saved (on local database) user game data\n                        var cachedData = await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.get(\"userGameData\");\n                    }\n                    catch(err2){}\n\n                    if(cachedData){ // if cachedData exist\n                        if(cachedData[\"completed_levels\"]){ // if the cachedData has completed levels\n                            // join the completed levels of the cached data to that of the loadedData\n                            var allCompletedLevelsSet =\n                                new Set(cachedData[\"completed_levels\"].concat(loadedData[\"completed_levels\"] || []));\n                            // make this the loadedData \"completed_levels\"\n                            loadedData[\"completed_levels\"] = Array.from(allCompletedLevelsSet);\n                        }\n                        if(cachedData[\"userDetails\"]){ // if the cachedData has user details\n                            // update the loadedData with the cachedData 'userDetails', if loadedData does not have its own\n                            loadedData[\"userDetails\"] = loadedData[\"userDetails\"] || cachedData[\"userDetails\"];\n                        }\n                        if(cachedData[\"noAds\"] === true || loadedData[\"noAds\"] === true){ // if the \"noAds\" is enabled for either\n                            // enable 'noAds' for the loadedData\n                            loadedData[\"noAds\"] = true;\n                        }\n                    }\n\n                    // save the loaded data\n                    await utopiasoftware[utopiasoftware_app_namespace].userGameDataOperations.saveBackupData(loadedData);\n                }\n                catch(err){}\n            }\n        }\n\n    }\n};\n"]}